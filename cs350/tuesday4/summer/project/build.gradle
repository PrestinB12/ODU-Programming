//Note: All versions are up to date

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id "java"
    id "application"

    id "com.github.spotbugs" version "5.0.14"
    id "project-report"
    id "jacoco"
    id "org.barfuin.gradle.jacocolog" version "2.0.0"            
    id "pmd"
    id "org.jbake.site" version "5.5.0"
    id "checkstyle"
}

java {
    sourceCompatibility = JavaVersion.toVersion(11)
    targetCompatibility = JavaVersion.toVersion(11)
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter:5.8.2"
    testImplementation "org.hamcrest:hamcrest-library:2.2"
    implementation "org.jsoup:jsoup:1.16.1"
    implementation "org.apache.poi:poi:5.2.3+"
    implementation "org.apache.poi:poi-ooxml:5.2.3+"
    implementation "com.cedarsoftware:json-io:4.14.0"
}

jar {
    archiveBaseName = "WebAnalysis"

    manifest {
        attributes(
            "Main-Class": "edu.odu.cs.cs350.web.WebAnalysis"
        )
    }
}

run {
    main = "edu.odu.cs.cs350.web.WebAnalysis"
    //Argument placeholder
    //args = ["arg1", "arg2"]
}

application {
    mainClass = "edu.odu.cs.cs350.web.WebAnalysis"
}

test {
    useJUnitPlatform()
    reports {
        html.required = true
    }
    ignoreFailures = true

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }

    finalizedBy jacocoTestReport
}

javadoc {
    failOnError false
}


//------------------------------------------------------------------------------
// Analysis Tools
//------------------------------------------------------------------------------

// SpotBugs
spotbugsMain {
    ignoreFailures = true
    effort = "max"
    reportLevel = "medium"
    reports {
       xml.enabled = false
       html.enabled = true
    }
}

spotbugsTest.enabled = false
// End SpotBugs config

jacoco {
    toolVersion = "0.8.10"
}

jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled true
        csv.enabled true
    }
}

pmd {
    toolVersion = "6.21.0"
    ignoreFailures = true
    ruleSets = [
        "category/java/bestpractices.xml",
        "category/java/codestyle.xml",
        "category/java/design.xml",
        "category/java/errorprone.xml",
        "category/java/performance.xml"
    ]
}


checkstyle {
    toolVersion "8.42"
    ignoreFailures = true
    showViolations = false
}

tasks.withType(Checkstyle) {
    reports {
        html.destination project.file("build/reports/checkstyle/main.html")
    }
}

checkstyleTest {
    enabled = false
}


pmdTest {
    enabled = false
}

//------------------------------------------------------------------------------
// Deploy Steps (Convenience Tasks)
//------------------------------------------------------------------------------
task reportsAndStuff(dependsOn: [
    "test",
    "jacocoTestReport",
    "checkstyleMain",
    "javadoc",
    "check",
    "spotbugsMain",
    "projectReport"]) {
    description "Generate all reports and documentation for this project."
}

task copyReports(type: Copy){
    dependsOn "reportsAndStuff"

    from "build/reports"
    into "build/tmp/website/assets"

    description "Copy all reports into \"website\" directory."
}

task copyDocumentation(type: Copy){
    dependsOn "reportsAndStuff"

    from "build/docs"
    into "build/tmp/website/assets"

    description "Copy Javadoc output into \"website\" directory."
}


//------------------------------------------------------------------------------
// JBake Configuration
//------------------------------------------------------------------------------
task copyJBakeTemplates(type: Copy){
    from "src/jbake"
    into "build/tmp/website"
}

task doAllTheCopying(dependsOn: [
    "copyReports",
    "copyDocumentation",
    "copyJBakeTemplates"]){
    description "Copy everything into the JBake working directory."
}

task buildHomePage(dependsOn: copyJBakeTemplates){
    inputs.files ("build/tmp/website/content/home0.md", "../README.md")
    outputs.file ("build/tmp/website/content/home.md")

    doLast  {
        outputs.files.singleFile.withOutputStream { out ->
            for (file in inputs.files) file.withInputStream {
                out << it << '\n'
            }
        }
    }
}

jbake {
    srcDirName = "build/tmp/website"
}

task setUpWebsite(){
    dependsOn "buildHomePage"
    dependsOn "doAllTheCopying"
}

bake {
    dependsOn "setUpWebsite"
}


//------------------------------------------------------------------------------
// Deploy/Update Project Website on GitHub Pages
//------------------------------------------------------------------------------
def websiteRepo = "git@github.com:Old-Dominion-Univ-CS-Dept/semester-project-website-analysis-cs350-tuesday-4-reports.git"

task clearPages(type: Delete){
    delete "build/gh-pages"
}

task clonePagesRepo(dependsOn: ["clearPages"]){
    doLast {
        exec {
            workingDir = "."
            commandLine = ["git", "clone", websiteRepo, "build/gh-pages"]
        }
        exec {
            workingDir = "build/gh-pages"
            commandLine = ["git", "config", "user.email", "\"jkast002@cs.odu.edu\""]
            //likely need to include all project member info here
        }
        exec {
            workingDir = "build/gh-pages"
            commandLine = ["git", "config", "user.name", "\"Auto Team-4\""]
            //likely need to include all project member info here
        }
    }
}

task copyJBakePagesForUse(dependsOn: ["bake", "clonePagesRepo"]){
    group "GitHub Pages"

    doLast {
        ant.copy (todir: "build/gh-pages") {
            fileset(dir: "build/jbake")
        }
    }
}

task updateGitHubPages(dependsOn: ["copyJBakePagesForUse"]){
    group "GitHub Pages"
    description "Copy everything into \"gh-pages\" directory and push to Report Website."

    doLast {
        def pagesDir = "$buildDir/gh-pages"
        exec {
            workingDir = "$buildDir/gh-pages"
            commandLine = ["git", "add", "."]
        }
        exec {
            workingDir = "$buildDir/gh-pages"
            commandLine = ["git", "commit", "-m", "Update report site"]
        }
        exec {
            workingDir = "$buildDir/gh-pages"
            commandLine = ["git", "push"]
        }
    }
}
/**/